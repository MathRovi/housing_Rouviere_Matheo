services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: db-1
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: u6x5qhup
      POSTGRES_DB: housing_db
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # FastAPI Backend
  api:
    build:
      context: ./housing-api
    container_name: api-1
    restart: always
    depends_on:
      - db
      - mlflow-model
      - kafka-broker
    ports:
      - "8000:8000"

  # MLflow Model Server
  mlflow-model:
    build:
      context: ./housing-model
    image: housing-mlflow-model:latest
    container_name: mlflow-model-1
    restart: always
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8001/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka Broker
  kafka-broker:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka-broker:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka_data:/var/lib/kafka/data

  # Script d'initialisation pour forcer la création du topic `housing_topic`
  kafka-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka-broker
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      sleep 10;
      kafka-topics --bootstrap-server kafka-broker:9092 --list | grep -q '^housing_topic$' ||
      kafka-topics --bootstrap-server kafka-broker:9092 --create --topic housing_topic --partitions 1 --replication-factor 1;
      echo '✅ Topic housing_topic créé ou déjà existant.';
      "

  # Kafka Consumer
  housing-consumer:
    build:
      context: ./housing-consumer
    container_name: housing-consumer
    restart: always
    depends_on:
      - kafka-broker
      - api
    environment:
      BOOTSTRAP_SERVERS: kafka-broker:9092
      TOPIC_NAME: housing_topic
      API_URL: http://api-1:8000/houses

  # Kafka Producer (Nouveau service)
  housing-producer:
    build:
      context: ./housing-consumer
    container_name: housing-producer
    depends_on:
      - kafka-broker
    entrypoint: ["python", "producer.py"]
    environment:
      BOOTSTRAP_SERVERS: kafka-broker:9092
      TOPIC_NAME: housing_topic

  # Alembic runner (option A) - pas de 'command', on laisse l'ENTRYPOINT alembic
  alembic-runner:
    build:
      context: ./housing-api
    container_name: alembic-runner
    depends_on:
      - db
    volumes:
      - ./housing-api:/app
    working_dir: /app
    entrypoint: ["alembic"]
    environment:
      DATABASE_URL: postgresql://postgres:u6x5qhup@db/housing_db

volumes:
  db_data:
  kafka_data:
